global proc createLiuSalonUI()
{
    global string $gMainWindow;
    setParent $gMainWindow;
    menu -label "LiuSalon" myMenu;
    setParent -menu myMenu;
    // menuItem -label "Create hair strand..." - command "createHairStrand";
    menuItem -label "Create HAIR model..." -command "createHairModel";
    // menuItem -label "Create hair model from selected curves..." -command "createHairModelFromSelected";
    menuItem -label "Assign LiuSalon shader..." -command "assignHairShader";
    // add something for choosing lights and adding?  or adding deep shadow maps?
    menuItem -label "Assign LiuSalon shader with lights..." -command "createLightSet";
}

global proc deleteLiuSalonUI()
{
    deleteUI -menu myMenu;
}

global proc browseHairFile()
{
    /*string $filePath[] = `fileDialog2 -fileMode 1 -caption "Browse for hair files"`;
    if (`size($filePath)`)
    {
        $fileId = `fopen $filePath[0] "r"`;
        string $filecontent;
        $grammar = `fread $fileId $grammar`;
        scrollField -edit -tx $grammar myScrollField;
    }*/
}

global proc createHairStrand()
{
    if ( `window -exists myWindow` ) {
     deleteUI myWindow;
    }
    
    // create a command to delete the window
    $command = ("deleteUI myWindow");

    window -title "Create Hair Strand" myWindow;
        columnLayout;
            intSliderGrp -label "Num Strands" -field true
                -minValue 0 -maxValue 10 hair_strands;
            intSliderGrp -label "Num Points Per Strand" -field true
                -minValue 0 -maxValue 10 hair_points;
            floatSliderGrp -label "Length of Each Strand" -field true
                -minValue 0 -maxValue 10 hair_length;
            rowLayout -nc 2;
                button -label "Create" -w 50 -command "callCmd()";
                button -label "Cancel" -command $command;
            setParent ..;
    showWindow myWindow;
}

global proc callCmd() {
    int $p = `intSliderGrp -q -value hair_points`;
    int $s = `intSliderGrp -q -value hair_strands`;
    int $l = `floatSliderGrp -q -value hair_length`;
    LiuSalonCmd -strands $s -points $p -length $l;
}

global proc createHairModel()
{
    //$transformNode = `createNode transform`;
    //$meshNode = `createNode mesh -p $transformNode`;
    //sets -add initialShadingGroup $meshNode;
    $curveGroup = `createNode curveVarGroup`;
    //sets -add initialShadingGroup $curvesNode;
    $hairNode = `createNode HairModelNode`;
    // create a random curve for input
    $curve = `curve -d 3 -p -12 -3 13 -p -12 3 8 -p -12 -3 1 -p -12 3 -4`;

    connectAttr ($hairNode + ".outputCurves") ($curveGroup + ".create");
    connectAttr ($curveGroup + ".local[0]") ($curve + ".create");
    select $hairNode;
    //$curveGroupChildren = `listRelatives $curveGroup`;
    //$num_children = `size($curveGroupChildren)`;
    
    // now you want to combine it into one curve!
    
    //connectAttr ($hairNode + ".outputMesh") ($meshNode + ".inMesh");
}

global proc createHairModelFromSelected()
{
    int $numCurves = 0;
    string $curveList[];
    string $selectionList[];

    /*
        Step 1: build list of selected nurbs curves, if less than two found
        output error message
    */
    $selectionList=`ls -selection`;
    clear ($curveList);

    for ($i = 0; $i < size($selectionList); $i++)
    {
        string $node = $selectionList[$i];
        string $children[] = `listRelatives -children $node`;
        for ($j = 0; $j < size ($children); $j++)
        {
            string $cnode = $children[$j];
            if (`nodeType $cnode` == "nurbsCurve")
            {
                $curveList [$numCurves] = $cnode;
                $numCurves++;
            }
        }
    }

    if ($numCurves < 2)
    {
        error "Invalid selection.  Select two or more curves.";
    }

    /*
        Step 2: create a HairModelNode and connect the curves
        worldspace to loft node's input
    */
    $hairNode = `createNode HairModelNode`;

    for ($i = 0; $i < size($curveList); $i++)
    {
        connectAttr ($curveList[$i] + ".worldSpace") ($hairNode + ".in["+$i+"]");
    }
    
    /*
        Step 3: connect output mesh with mesh
    */
    $transformNode = `createNode transform`;
    $meshNode = `createNode mesh -p $transformNode`;
    sets -add initialShadingGroup $meshNode;
    connectAttr ($hairNode + ".outputMesh") ($meshNode + ".inMesh");
}

global proc assignHairShader()
{
    // this should create a 3delight surface shader
    string $shader_path = `fileDialog -directoryMask "*.sdl" -title "Open Hair Shader File"`;
    string $surface_shader = DL_createSurfaceShader( $shader_path, 1);
    DL_setAssignmentPanelAttrib("object", "surface", $surface_shader );
    // make it assign geometry attribute
    $new_node = DGA_create();
    DGA_outputMayaCurvesCreateAttr($new_node);
    DGA_startWidthCreateAttr($new_node);
    DGA_endWidthCreateAttr($new_node);
    setAttr ($new_node + ".outputMayaCurves") 1;
    setAttr ($new_node + ".startWidth") 0.07;
    setAttr ($new_node + ".endWidth") 0.07;
    // create a light illumination attribute
    DGA_illuminationFromCreateAttr($new_node);
    DL_setAssignmentPanelAttrib("object", "delightGeoAttribs", $new_node);
    select $surface_shader;
}

global proc createLightSet()
{
    // select lights AND HAIR
    // problem: we need the geometry attribute node that results from DGA_create()
    $selectionList = `ls -selection`;
    string $lights[]; // array of lights, make this a set
    for ($i = 0; $i < size($selectionList) - 1; $i++)
    {
        $lights[$i] = $selectionList[$i];
    }
    select $lights;
    $lightSet = `sets`;
    // now get the last selection, the HAIR MODEL
    $hair = $selectionList[size($selectionList)-1];
    select $hair;
    $hairSet = `sets`;

    // this should create a 3delight surface shader
    string $shader_path = `fileDialog -directoryMask "*.sdl" -title "Open Hair Shader File"`;
    string $surface_shader = DL_createSurfaceShader( $shader_path, 1);
    DL_setAssignmentPanelAttrib("object", "surface", $surface_shader );
    // make it assign geometry attribute
    $new_node = DGA_create();
    DGA_outputMayaCurvesCreateAttr($new_node);
    DGA_startWidthCreateAttr($new_node);
    DGA_endWidthCreateAttr($new_node);
    setAttr ($new_node + ".outputMayaCurves") 1;
    setAttr ($new_node + ".startWidth") 0.07;
    setAttr ($new_node + ".endWidth") 0.07;
    // create a light illumination attribute
    DGA_illuminationFromCreateAttr($new_node);
    AE_setConnectedNodeFromMenu (($new_node) + ".illuminationFrom") "AE_updateAE" $lightSet;
    DL_setAssignmentPanelAttrib("object", "delightGeoAttribs", $new_node);
    
    // create a new light attribute
    $light_node = DLA_create();
    // create shadow map attribute
    DLA_generateShadowMapsCreateAttr($light_node);
    setAttr ($light_node + ".generateShadowMaps") 1;
    // create shadow map type attribute
    DLA_shadowMapTypeCreateAttr($light_node);
    setAttr ($light_node + ".shadowMapType") 6; // change to deep shadow maps
    // create other attributes
    DLA_shadowMapNameCreateAttr($light_node);
    DLA_shadowMapResolutionCreateAttr($light_node);
    DLA_shadowMapShadingRateCreateAttr($light_node);
    DLA_shadowDepthFilterCreateAttr($light_node);
    DLA_shadowMapPixelSamplesCreateAttr($light_node);
    DLA_nearClipPlaneCreateAttr($light_node);
    DLA_farClipPlaneCreateAttr($light_node);
    DLA_shadowCameraCreateAttr($light_node);
    // create shadow objects attribute
    DLA_shadowObjectsCreateAttr($light_node);
    AE_setConnectedNodeFromMenu ($light_node + ".shadowObjects") "AE_updateAE" $hairSet;
    select $lights;
    DL_setAssignmentPanelAttrib("object", "delightLightAttribs", $light_node);
    select $surface_shader;
 //   AE_setConnectedNodeFromMenu delightGeoAttribs1.illuminationFrom "AE_updateAE" set1;
}