global proc createLiuSalonUI()
{
    global string $gMainWindow;
    setParent $gMainWindow;
    menu -label "LiuSalon" myMenu;
    setParent -menu myMenu;
    menuItem -label "Create hair strand..." - command "createHairStrand";
    menuItem -label "Create hair model..." -command "createHairModel";
    menuItem -label "Create hair model from selected curves..." -command "createHairModelFromSelected";
    menuItem -label "Assign hair shader..." -command "assignHairShader";
}

global proc deleteLiuSalonUI()
{
    deleteUI -menu myMenu;
}

global proc browseHairFile()
{
    /*string $filePath[] = `fileDialog2 -fileMode 1 -caption "Browse for hair files"`;
    if (`size($filePath)`)
    {
        $fileId = `fopen $filePath[0] "r"`;
        string $filecontent;
        $grammar = `fread $fileId $grammar`;
        scrollField -edit -tx $grammar myScrollField;
    }*/
}

global proc createHairStrand()
{
    if ( `window -exists myWindow` ) {
     deleteUI myWindow;
    }
    
    // create a command to delete the window
    $command = ("deleteUI myWindow");

    window -title "Create Hair Strand" myWindow;
        columnLayout;
            intSliderGrp -label "Num Strands" -field true
                -minValue 0 -maxValue 10 hair_strands;
            intSliderGrp -label "Num Points Per Strand" -field true
                -minValue 0 -maxValue 10 hair_points;
            floatSliderGrp -label "Length of Each Strand" -field true
                -minValue 0 -maxValue 10 hair_length;
            rowLayout -nc 2;
                button -label "Create" -w 50 -command "callCmd()";
                button -label "Cancel" -command $command;
            setParent ..;
    showWindow myWindow;
}

global proc callCmd() {
    int $p = `intSliderGrp -q -value hair_points`;
    int $s = `intSliderGrp -q -value hair_strands`;
    int $l = `floatSliderGrp -q -value hair_length`;
    LiuSalonCmd -strands $s -points $p -length $l;
}

 global proc createHairModel()
{
    $transformNode = `createNode transform`;
    $meshNode = `createNode mesh -p $transformNode`;
    sets -add initialShadingGroup $meshNode;
    $hairNode = `createNode HairModelNode`;
    connectAttr ($hairNode + ".outputMesh") ($meshNode + ".inMesh");
}

global proc createHairModelFromSelected()
{
    int $numCurves = 0;
    string $curveList[];
    string $selectionList[];

    /*
        Step 1: build list of selected nurbs curves, if less than two found
        output error message
    */
    $selectionList=`ls -selection`;
    clear ($curveList);

    for ($i = 0; $i < size($selectionList); $i++)
    {
        string $node = $selectionList[$i];
        string $children[] = `listRelatives -children $node`;
        for ($j = 0; $j < size ($children); $j++)
        {
            string $cnode = $children[$j];
            if (`nodeType $cnode` == "nurbsCurve")
            {
                $curveList [$numCurves] = $cnode;
                $numCurves++;
            }
        }
    }

    if ($numCurves < 2)
    {
        error "Invalid selection.  Select two or more curves.";
    }

    /*
        Step 2: create a HairModelNode and connect the curves
        worldspace to loft node's input
    */
    $hairNode = `createNode HairModelNode`;

    for ($i = 0; $i < size($curveList); $i++)
    {
        connectAttr ($curveList[$i] + ".worldSpace") ($hairNode + ".in["+$i+"]");
    }
    
    /*
        Step 3: connect output mesh with mesh
    */
    $transformNode = `createNode transform`;
    $meshNode = `createNode mesh -p $transformNode`;
    sets -add initialShadingGroup $meshNode;
    connectAttr ($hairNode + ".outputMesh") ($meshNode + ".inMesh");
}

 global proc assignHairShader()
{
    // this should create a 3delight surface shader
    string $shader_path = `fileDialog -directoryMask "*.sdl" -title "Open Hair Shader File"`;
    string $surface_shader = DL_createSurfaceShader( $shader_path, 1);
    DL_setAssignmentPanelAttrib("object", "surface", $surface_shader );
    select $surface_shader;
}

